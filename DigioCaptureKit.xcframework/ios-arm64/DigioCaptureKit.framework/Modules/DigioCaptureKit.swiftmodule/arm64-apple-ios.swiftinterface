// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DigioCaptureKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Accelerate
import CoreLocation
@_exported import DigioCaptureKit
import Foundation
import MLKitFaceDetection
import MLKitVision
import Photos
import Swift
import UIKit
import UserNotifications
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class FaceDetected {
  public var boundingBox: CoreFoundation.CGRect
  public var leftEyeOpenProbability: Swift.Float?
  public var rightEyeOpenProbability: Swift.Float?
  public var smilingProbability: Swift.Float?
  public var headEulerAngleX: Swift.Float?
  public var headEulerAngleY: Swift.Float?
  public var headEulerAngleZ: Swift.Float?
  public var contours: [CoreFoundation.CGPoint]
  public var isMultipleFaces: Swift.Bool
  public var numberOfFaces: Swift.Int
  @objc deinit
}
public class Facefy {
  public init()
  public func detect(_ image: UIKit.UIImage, _ minFaceWidth: CoreFoundation.CGFloat, onSuccess: @escaping (DigioCaptureKit.FaceDetected?) -> Swift.Void, onError: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CameraConfig {
  @objc deinit
}
public enum KeyError : Swift.String {
  case INVALID_CAPTURE_TYPE
  case INVALID_CAMERA_LENS
  case INVALID_NUMBER_OF_IMAGES
  case INVALID_TIME_BETWEEN_IMAGES
  case INVALID_OUTPUT_IMAGE_WIDTH
  case INVALID_OUTPUT_IMAGE_HEIGHT
  case INVALID_DETECTION_BOX_COLOR
  case INVALID_MINIMUM_SIZE
  case INVALID_MAXIMUM_SIZE
  case INVALID_ROI_TOP_OFFSET
  case INVALID_ROI_RIGHT_OFFSET
  case INVALID_ROI_BOTTOM_OFFSET
  case INVALID_ROI_LEFT_OFFSET
  case INVALID_ROI_COLOR
  case INVALID_FACE_CONTOURS_COLOR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CameraLauncher {
  public static func present(from parent: UIKit.UIViewController, mode: DigioCaptureKit.CameraMode, isImagePreview: Swift.Bool, shouldShowSwitchCameraButton: Swift.Bool, completion: @escaping (Swift.String?, UIKit.UIImage) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DigiFacefyController {
  public func detect(image: UIKit.UIImage, minFaceWidth: CoreFoundation.CGFloat = 40, onSuccess: @escaping (DigioCaptureKit.FaceDetected?) -> Swift.Void, onError: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
public enum PermissionType {
  case camera
  case microphone
  case photoLibrary
  case locationWhenInUse
  case notification
  public static func == (a: DigioCaptureKit.PermissionType, b: DigioCaptureKit.PermissionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PermissionStatus {
  case granted
  case denied
  case notDetermined
  public static func == (a: DigioCaptureKit.PermissionStatus, b: DigioCaptureKit.PermissionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CameraGraphicView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var draw: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func update()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func handleDraw(detectionBox: CoreFoundation.CGRect, faceContours: [CoreFoundation.CGPoint])
  @_Concurrency.MainActor @preconcurrency public func handleDraw(detectionBox: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func clear()
  @_Concurrency.MainActor @preconcurrency public func setSuggestionMessage(_ message: Swift.String?, _ textColor: UIKit.UIColor, _ backgroundColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PreviewLauncher {
  public static func launchPreview(from viewController: UIKit.UIViewController, image: UIKit.UIImage, imagePath: Swift.String, environment: Swift.String, clientId: Swift.String, secretKey: Swift.String, onComplete: @escaping () -> Swift.Void, onRetake: @escaping () -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class PermissionManager : ObjectiveC.NSObject {
  public static func status(for type: DigioCaptureKit.PermissionType) -> DigioCaptureKit.PermissionStatus
  public static func request(for type: DigioCaptureKit.PermissionType, completion: @escaping (DigioCaptureKit.PermissionStatus) -> Swift.Void)
  public static func openSettings()
  @objc override dynamic public init()
  @objc deinit
}
extension DigioCaptureKit.PermissionManager : CoreLocation.CLLocationManagerDelegate {
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@_hasMissingDesignatedInitializers public class ROI {
  public func isOutOf(topOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat, leftOffset: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
@objc public enum CaptureType : Swift.Int {
  case NONE = 0
  case FACE = 1
  case QRCODE = 2
  case FRAME = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Message : Swift.String {
  case INVALID_MINIMUM_SIZE
  case INVALID_MAXIMUM_SIZE
  case INVALID_OUT_OF_ROI
  case INVALID_TORCH_LENS_USAGE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CameraMode : Swift.String {
  case none
  case face
  case qrcode
  case frame
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol CameraEventListenerDelegate {
  @objc func onImageCaptured(_ type: Swift.String, _ count: Swift.Int, _ total: Swift.Int, _ imagePath: Swift.String, _ darkness: Foundation.NSNumber?, _ lightness: Foundation.NSNumber?, _ sharpness: Foundation.NSNumber?)
  @objc func onFaceDetected(_ x: Swift.Int, _ y: Swift.Int, _ width: Swift.Int, _ height: Swift.Int, _ leftEyeOpenProbability: Foundation.NSNumber?, _ rightEyeOpenProbability: Foundation.NSNumber?, _ smilingProbability: Foundation.NSNumber?, _ headEulerAngleX: Foundation.NSNumber?, _ headEulerAngleY: Foundation.NSNumber?, _ headEulerAngleZ: Foundation.NSNumber?, _ darkness: Foundation.NSNumber?, _ lightness: Foundation.NSNumber?, _ sharpness: Foundation.NSNumber?, _ isMultiface: Swift.Bool, _ numberOfFaces: Swift.Int)
  @objc func onFaceUndetected()
  @objc func onEndCapture()
  @objc func onError(_ error: Swift.String)
  @objc func onMessage(_ message: Swift.String)
  @objc func onPermissionDenied()
  @objc func onQRCodeScanned(_ content: Swift.String)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class CameraView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var cameraEventListener: (any DigioCaptureKit.CameraEventListenerDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func startPreview()
  @objc @_Concurrency.MainActor @preconcurrency public func startCaptureType(_ captureType: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnalyzer()
  @objc @_Concurrency.MainActor @preconcurrency public func destroy()
  @objc @_Concurrency.MainActor @preconcurrency public func restartCapture(_ type: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func capture()
  @objc @_Concurrency.MainActor @preconcurrency public func toggleCameraLens()
  @objc @_Concurrency.MainActor @preconcurrency public func setCameraLens(_ cameraLens: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getCameraLens() -> Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public func setNumberOfImages(_ numberOfImages: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setTimeBetweenImages(_ timeBetweenImages: Swift.Int64)
  @objc @_Concurrency.MainActor @preconcurrency public func setOutputImageWidth(_ width: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setOutputImageHeight(_ height: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setSaveImageCaptured(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionBox(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionBoxColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionMinSize(_ minimumSize: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionMaxSize(_ maximumSize: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public var detectionTopSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionRightSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionBottomSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionLeftSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceContours(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceContoursColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setTorch(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROI(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROITopOffset(_ topOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIRightOffset(_ rightOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIBottomOffset(_ bottomOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROILeftOffset(_ leftOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIAreaOffset(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIAreaOffsetColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceDetectionStorkeColor(from color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setSuggestionMessage(message: Swift.String?, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setMinimumFaceSize(_ size: CoreFoundation.CGFloat)
  @objc deinit
}
public struct PermissionHelper {
}
@_hasMissingDesignatedInitializers public class CaptureOptions {
  @objc deinit
}
extension DigioCaptureKit.KeyError : Swift.Equatable {}
extension DigioCaptureKit.KeyError : Swift.Hashable {}
extension DigioCaptureKit.KeyError : Swift.RawRepresentable {}
extension DigioCaptureKit.PermissionType : Swift.Equatable {}
extension DigioCaptureKit.PermissionType : Swift.Hashable {}
extension DigioCaptureKit.PermissionStatus : Swift.Equatable {}
extension DigioCaptureKit.PermissionStatus : Swift.Hashable {}
extension DigioCaptureKit.CaptureType : Swift.Equatable {}
extension DigioCaptureKit.CaptureType : Swift.Hashable {}
extension DigioCaptureKit.CaptureType : Swift.RawRepresentable {}
extension DigioCaptureKit.Message : Swift.Equatable {}
extension DigioCaptureKit.Message : Swift.Hashable {}
extension DigioCaptureKit.Message : Swift.RawRepresentable {}
extension DigioCaptureKit.CameraMode : Swift.Equatable {}
extension DigioCaptureKit.CameraMode : Swift.Hashable {}
extension DigioCaptureKit.CameraMode : Swift.RawRepresentable {}
